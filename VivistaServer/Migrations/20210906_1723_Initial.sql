-- This script was generated by the Schema Diff utility in pgAdmin 4.
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.
BEGIN;
CREATE SEQUENCE public.bug_reports_id_seq
    INCREMENT 1
    START 1
    MINVALUE 1
    MAXVALUE 2147483647
    CACHE 1;

CREATE SEQUENCE public.users_userid_seq
    INCREMENT 1
    START 1
    MINVALUE 1
    MAXVALUE 2147483647
    CACHE 1;
CREATE TABLE public.users
(
    userid integer NOT NULL DEFAULT nextval('users_userid_seq'::regclass),
    username text COLLATE pg_catalog."default" NOT NULL,
    pass text COLLATE pg_catalog."default" NOT NULL,
    date_created timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    email text COLLATE pg_catalog."default" NOT NULL,
    verified boolean NOT NULL DEFAULT false,
    verification_token text COLLATE pg_catalog."default",
    pictureid text COLLATE pg_catalog."default" NOT NULL DEFAULT 'profile.png'::text,
    CONSTRAINT users_pkey PRIMARY KEY (userid),
    CONSTRAINT users_username_len CHECK (length(username) <= 25)
)

TABLESPACE pg_default;

CREATE TABLE public.bug_reports
(
    id integer NOT NULL DEFAULT nextval('bug_reports_id_seq'::regclass),
    problem text COLLATE pg_catalog."default",
    repro text COLLATE pg_catalog."default",
    email text COLLATE pg_catalog."default",
    CONSTRAINT bug_reports_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

CREATE TABLE public.password_reset_tokens
(
    userid integer NOT NULL,
    token text COLLATE pg_catalog."default" NOT NULL,
    expiry timestamp without time zone NOT NULL,
    CONSTRAINT password_reset_tokens_pkey PRIMARY KEY (userid),
    CONSTRAINT password_reset_tokens_users_userid FOREIGN KEY (userid)
        REFERENCES public.users (userid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

CREATE TABLE public.sessions
(
    token text COLLATE pg_catalog."default" NOT NULL,
    expiry timestamp without time zone NOT NULL,
    userid integer NOT NULL,
    CONSTRAINT session_users_userid FOREIGN KEY (userid)
        REFERENCES public.users (userid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
)

TABLESPACE pg_default;

CREATE INDEX fki_session_users_userid
    ON public.sessions USING btree
    (userid ASC NULLS LAST)
    TABLESPACE pg_default;

CREATE INDEX users_username_trigram
    ON public.users USING gin
    (username COLLATE pg_catalog."default" gin_trgm_ops)
    TABLESPACE pg_default;
CREATE TABLE public.videos
(
    id uuid NOT NULL,
    userid integer NOT NULL,
    "timestamp" timestamp without time zone,
    downloadsize bigint,
    title text COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    length integer,
    downloads integer NOT NULL DEFAULT 0,
    views integer NOT NULL DEFAULT 0,
    privacy integer NOT NULL DEFAULT 0,
    search tsvector GENERATED ALWAYS AS (((setweight(to_tsvector('english'::regconfig, title), 'A'::"char") || ''::tsvector) || setweight(to_tsvector('english'::regconfig, description), 'B'::"char"))) STORED,
    CONSTRAINT videos_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

CREATE INDEX video_search_index
    ON public.videos USING gin
    (search)
    TABLESPACE pg_default;

END;
