<div class="pure-g">
	<div class="pure-u-1">
		<h1>Dashboard</h1>
		<div class="pure-button-group">
			<button id="minuteBtn" class="pure-button pure-button-active">Hour</button>
			<button id="hourBtn" class="pure-button">Week</button>
			<button id="dayBtn" class="pure-button">Month</button>
		</div>
		<div class="pure-u-1">
			<div class="pure-form">
				<input type="date" id="date" name="date" />
				<input type="time" id="time" name="time" value="09:00" />
			</div>
		</div>

		<div class="pure-form">
			<select id="endpoint">
				{% for endpoint in endpoints %}
				<option value="{{endpoint}}">{{endpoint}}</option>
				{% endfor %}
			</select>
		</div>
		<br>

		<h2>Execution time data</h2>
		<div class="chartBox">
			<canvas id="areaChart"></canvas>
		</div>

		<div class="chartBox">
			<div class="pure-form">
				<select id="dataType">
					<option value="Average">Average</option>
					<option value="Median">Median</option>
					<option value="Percentile 95">Percentile 95</option>
					<option value="Percentile 99">Percentile 99</option>
					<option value="Render time">Render time</option>
					<option value="Db exec time">Db exec time</option>
				</select>
			</div>
			<canvas id="mixedChart"></canvas>
		</div>

		<table class="pure-table" id="outlierTabel">
			<thead>
				<tr>
					<th>Timestamp</th>
					<th>Endpoint</th>
				</tr>
			</thead>
			<tbody id="outlierTabelBody">
			</tbody>
		</table>
		<button id="outliersButton" class="pure-button">View details of outliers</button>

		<h2>General data</h2>
		<div class="chartBox">
			<div class="pure-form">
				<select id="generalDataType">
					<option value="Downloads">Downloads</option>
					<option value="Views">Views</option>
					<option value="Uploads">Uploads</option>
					<option value="Uncaught exceptions">Uncaught exceptions</option>
					<option value="Count total requests">Count total requests</option>
				</select>
			</div>
			<canvas id="barChart"></canvas>
		</div>

		<h2>Memory data</h2>
		<div class="chartBox">
			<div class="pure-form">
				<select id="generalDataTypeMemory">
					<option value="Private memory">Private memory</option>
					<option value="Working set">Working set</option>
					<option value="Virtual memory">Virtual memory</option>
				</select>
			</div>
			<canvas id="barChartMemory"></canvas>
		</div>


		<br />
		<table class="pure-table">
			<thead>
				<tr>
					<th>Users</th>
					<th>Videos</th>
					<th>Downloads</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>{{users}}</td>
					<td>{{videos}}</td>
					<td>{{downloads}}</td>
				</tr>
			</tbody>
		</table>

		<table class="pure-table">
			<thead>
				<tr>
					<th>Timestamp</th>
					<th>Seconds</th>
					<th>Request info</th>
				</tr>
			</thead>
			<tbody>
			</tbody>
		</table>
	</div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>

<style type="text/css">
	.chartBox {
		width: 70%;
	}
</style>
<script>
	let dataOfDay = {{ minuteData | json}};
	let dataOfWeek = {{ hourData | json}};
	let dataOfMonth = {{ dayData | json}};
	let endpoints = {{ endpoints | json }};
	let outliers = {{ outliers | json}}
	let selectedOutliers = [];

	for (let i = 0; i < outliers.length; i++) {
		outliers[i].reqinfo = JSON.parse(outliers[i].reqinfo);
	}
	

	let generalDataOfDay = {{ generalMinuteData | json}};
	let generalDataOfWeek = {{ generalDataOfWeek | json}};
	let generalDataOfMonth = {{ generalDataOfMonth | json}};


	let selectedEndpoint = endpoints[0];
	let timeUnit = "minute";
	let selectedData = dataOfDay;
	let selectedGeneralData = generalDataOfDay;
	let dataType = document.getElementById("dataType").value;
	let generalDataType = document.getElementById("generalDataType").value;
	let generalDataTypeMemory = document.getElementById("generalDataTypeMemory").value;

	//Date paramter
	const queryString = new URLSearchParams(window.location.search).get("date");
	document.getElementById("date").value = queryString;
	if (document.getElementById("date").value === "") {
		document.getElementById("date").value = new Date().toISOString().slice(0, 10);
	}
	let time;
	let dateTime;
	let maxDateTime;
	SetDateAndTimes();

	//Configure charts
	const countRequest = {
		label: 'Number of requests from endpoint',
		borderColor: 'hsl(350, 60%, 50%)',
		backgroundColor: 'hsl(350, 60%, 50%)',
		data: selectedData.map(a => ({ x: a.timestamp, y: a.countrequests, endpoint: a.endpoint })).filter(a => a.endpoint === selectedEndpoint && new Date(a.x) >= dateTime && new Date(a.x) < maxDateTime),
		order: 1,
		yAxisID: 'y',
	};

	const dataMixedChart = {
		//labels: labels,
		datasets: [
			{
				label: 'Number of requests from endpoint',
				borderColor: 'hsl(350, 60%, 50%)',
				backgroundColor: 'hsl(350, 60%, 50%)',
				data: FilterWithEndpointAndTime(GetCountRequestData()),
				order: 1,
				yAxisID: 'y',
			},
			{
				label: 'Average in ms',
				borderColor: 'hsl(250, 60%, 33%)',
				backgroundColor: 'hsl(250, 60%, 33%)',
				pointRadius: 4,
				data: FilterWithEndpointAndTime(GetAverageData()),
				type: 'line',
				order: 0,
				yAxisID: 'y1',
			},
			{
				label: 'outliers',
				borderColor: 'hsl(170, 43%, 46%)',
				backgroundColor: 'hsl(170, 43%, 46%)',
				pointRadius: 7,
				data: FilterWithEndpointAndTime(GetOutliersSeconds()),
				type: 'scatter',
				order: 2,
				yAxisID: 'y1'
			}
		]
	};
	const configMixedChart = {
		type: 'bar',
		data: dataMixedChart,
		options: {
			plugins: {
				title: {
					display: true,
					text: 'Count requests and average'
				},
			},
			scales: {
				x: {
					type: 'time',
					time: {
						unit: timeUnit,
						displayFormats: {
							minute: 'hh:mm',
							hour: 'MMM dd - hh:mm',
							day: 'MMM dd'

						}
					}
				},
				y: {
					beginAtZero: true,
					position: 'left',
					ticks: {
						precision: 0
					},
				},
				y1: {
					beginAtZero: true,
					position: 'right',
					ticks: {
						callback: function (value, index, values) {
							return value + ' ms';
						}
					}
				}
			}
		}
	};
	const mixedChart = new Chart(
		document.getElementById('mixedChart'),
		configMixedChart
	);

	const dataAreaChart = {
		datasets: [
			{
				label: 'Db exec time in ms',
				data: FilterWithEndpointAndTime(GetDbExecTimeData()),
				borderColor: 'hsl(330, 60%, 33%)',
				backgroundColor: 'hsl(330, 60%, 33%)',
				fill: true,
				pointRadius: 4
			},
			{
				label: 'Render time in ms',
				data: FilterWithEndpointAndTime(GetRenderTimeData()),
				borderColor: 'hsl(50, 60%, 67%)',
				backgroundColor: 'hsl(50, 60%, 67%)',
				fill: true,
				pointRadius: 4
			},
			{
				label: 'Median in ms',
				data: FilterWithEndpointAndTime(GetMedianData()),
				borderColor: 'hsl(140, 75%, 27%)',
				backgroundColor: 'hsl(140, 75%, 27%)',
				fill: true,
				pointRadius: 4
			},
			{
				label: 'Average in ms',
				data: FilterWithEndpointAndTime(GetAverageData()),
				backgroundColor: 'hsl(350, 60%, 50%)',
				fill: true,
				pointRadius: 4
			},
			{
				label: '95 Percentile in ms',
				data: FilterWithEndpointAndTime(GetPercentile95Data()),
				borderColor: 'hsl(250, 60%, 33%)',
				backgroundColor: 'hsl(250, 60%, 33%)',
				fill: true,
				pointRadius: 4
			},
			{
				label: '99 Percentile in ms',
				data: FilterWithEndpointAndTime(GetPercentile99Data()),
				borderColor: 'hsl(170, 43%, 46%)',
				backgroundColor: 'hsl(170, 43%, 46%)',
				fill: true,
				pointRadius: 4
			}

		]
	}
	const configAreaChart  = {
		type: 'line',
		data: dataAreaChart,
		options: {
			responsive: true,
			plugins: {
				title: {
					display: true,
					text: 'Db exec time, render time, median, average, percentile 95 and percentile 99'
				},
			},
			interaction: {
				mode: 'nearest',
				axis: 'x',
				intersect: false
			},
			scales: {
				x: {
					type: 'time',
					time: {
						unit: timeUnit,
						displayFormats: {
							minute: 'hh:mm',
							hour: 'MMM dd - hh:mm',
							day: 'MMM dd'

						}
					}
				},
				y: {
					stacked: false,
					beginAtZero: true,
					ticks: {
						callback: function (value, index, values) {
							return value + ' ms';
						}
					}
				}
			}
		}
	};
	const areaChart = new Chart(
		document.getElementById('areaChart'),
		configAreaChart
	);

	const dataBarChart = {
		datasets: [
			{
				label: 'Downloads',
				data: FilterWithTime(GetDownloads()),
				backgroundColor: 'hsl(350, 60%, 50%)',
			}
		]
	};
	const configBarChart = {
		type: 'bar',
		data: dataBarChart,
		options: {
			plugins: {
				title: {
					display: true,
					text: 'Downloads'
				},
			},
			responsive: true,
			scales: {
				x: {
					type: 'time',
					time: {
						unit: timeUnit,
						displayFormats: {
							minute: 'hh:mm',
							hour: 'MMM dd - hh:mm',
							day: 'MMM dd'

						}
					}
				},
				y: {
					ticks: {
						precision: 0
					},
					beginAtZero: true
				}
			}
		}
	};
	const barChart = new Chart(
		document.getElementById('barChart'),
		configBarChart
	);

	const dataBarChartMemory = {
		datasets: [
			{
				label: 'Private memory in mb',
				data: FilterWithTime(GetPrivateMemory()),
				backgroundColor: 'hsl(170, 43%, 46%)',
			}
		]
	}

	const configBarChartMemory = {
		type: 'bar',
		data: dataBarChartMemory,
		options: {
			plugins: {
				title: {
					display: true,
					text: 'Private Memory in mb'
				},
			},
			responsive: true,
			scales: {
				x: {
					type: 'time',
					time: {
						unit: timeUnit,
						displayFormats: {
							minute: 'hh:mm',
							hour: 'MMM dd - hh:mm',
							day: 'MMM dd'

						}
					}
				},
				y: {
					ticks: {
						precision: 0,
						callback: function (value, index, values) {
							return value + ' mb';
						}
					},
					beginAtZero: true
				}
			}
		}
	};
	const barChartMemory = new Chart(
		document.getElementById('barChartMemory'),
		configBarChartMemory
	);


	//Event listeners
	document.getElementById("minuteBtn").addEventListener("click", function () {
		selectedData = dataOfDay;
		selectedGeneralData = generalDataOfDay;
		ChangeTimeUnit("minute");
	});
	document.getElementById("hourBtn").addEventListener("click", function () {
		selectedData = dataOfWeek;
		selectedGeneralData = generalDataOfWeek;
		ChangeTimeUnit("hour");
	});
	document.getElementById("dayBtn").addEventListener("click", function () {
		selectedData = dataOfMonth;
		selectedGeneralData = generalDataOfMonth;
		ChangeTimeUnit("day");
	});

	document.getElementById("date").addEventListener("change", function () { location.href = "/admin/dashboard?date=" + document.getElementById("date").value;});
	document.getElementById("endpoint").addEventListener("change", function () { ChangeEndpoint(document.getElementById("endpoint").value) });
	document.getElementById("time").addEventListener("blur", function () { selectedData = dataOfDay; ChangeDataOfCharts(); });
	document.getElementById("dataType").addEventListener("change", function () { dataType = document.getElementById("dataType").value; ParameterChanged(); });
	document.getElementById("generalDataType").addEventListener("change", function () { generalDataType = document.getElementById("generalDataType").value; GeneralParameterChanged(); });
	document.getElementById("generalDataTypeMemory").addEventListener("change", function () { generalDataTypeMemory = document.getElementById("generalDataTypeMemory").value; GeneralParameterMemoryChanged(); });
	document.getElementById("outliersButton").addEventListener("click", function () { NavigateToOutliers() });

	//Change paramters
	function ChangeTimeUnit(time) {
        document.getElementById(timeUnit + "Btn").classList.remove("pure-button-active");
        document.getElementById(time + "Btn").classList.add("pure-button-active");
		timeUnit = time;

		mixedChart.options.scales.x.time.unit = timeUnit;
		areaChart.options.scales.x.time.unit = timeUnit;
		barChart.options.scales.x.time.unit = timeUnit;
		barChartMemory.options.scales.x.time.unit = timeUnit;

		ChangeDataOfCharts();

	}

	function ChangeEndpoint(endpoint) {
		selectedEndpoint = endpoint;
		ChangeDataOfCharts();
	}

	function ChangeDataOfCharts() {
		//Note(Tom): If time unit is minute, then we need to see data of specific hour
		if (timeUnit === 'minute') {
			SetDateAndTimes();

			mixedChart.data.datasets[0].data = FilterWithEndpointAndTime(GetCountRequestData());
			mixedChart.data.datasets[2].data = FilterWithEndpointAndTime(GetOutliersSeconds());

			areaChart.data.datasets[0].data = FilterWithEndpointAndTime(GetDbExecTimeData());
			areaChart.data.datasets[1].data = FilterWithEndpointAndTime(GetRenderTimeData());
			areaChart.data.datasets[2].data = FilterWithEndpointAndTime(GetMedianData());
			areaChart.data.datasets[3].data = FilterWithEndpointAndTime(GetAverageData());
			areaChart.data.datasets[4].data = FilterWithEndpointAndTime(GetPercentile95Data());
			areaChart.data.datasets[5].data = FilterWithEndpointAndTime(GetPercentile99Data());
		}
		else {
			mixedChart.data.datasets[0].data = FilterWithEndpoint(GetCountRequestData());
			mixedChart.data.datasets[2].data = {};

			areaChart.data.datasets[0].data = FilterWithEndpoint(GetDbExecTimeData());
			areaChart.data.datasets[1].data = FilterWithEndpoint(GetRenderTimeData());
			areaChart.data.datasets[2].data = FilterWithEndpointAndTime(GetMedianData());
			areaChart.data.datasets[3].data = FilterWithEndpoint(GetAverageData());
			areaChart.data.datasets[4].data = FilterWithEndpoint(GetPercentile95Data());
			areaChart.data.datasets[5].data = FilterWithEndpoint(GetPercentile99Data());
		}
		ParameterChanged();
		GeneralParameterChanged();
		GeneralParameterMemoryChanged();

		mixedChart.update();
		areaChart.update();
		barChart.update();
	}


	function GetPercentile95Data() {
		if (selectedData === null) {
			return null;
		}
		return selectedData
			.map(a => ({ x: a.timestamp, y: a.percentile95 * 1000, endpoint: a.endpoint }));
	}

	function GetAverageData() {
		if (selectedData === null) {
			return null;
		}
		return selectedData
			.map(a => ({ x: a.timestamp, y: a.average * 1000, endpoint: a.endpoint }));
	}

	function GetPercentile99Data() {
		if (selectedData === null) {
			return null;
		}
		return selectedData
			.map(a => ({ x: a.timestamp, y: a.percentile99 * 1000, endpoint: a.endpoint }));
	}

	function GetCountRequestData() {
		if (selectedData === null) {
			return null;
		}
		return selectedData
			.map(a => ({ x: a.timestamp, y: a.countrequests, endpoint: a.endpoint }));
	}

	function GetDbExecTimeData() {
		if (selectedData === null) {
			return null;
		}
		return selectedData
			.map(a => ({ x: a.timestamp, y: a.dbExecTime * 1000, endpoint: a.endpoint }));
	}

	function GetRenderTimeData() {
		if (selectedData === null) {
			return null;
		}
		return selectedData
			.map(a => ({ x: a.timestamp, y: a.renderTime * 1000, endpoint: a.endpoint }));
	}

	function GetMedianData() {
		if (selectedData === null) {
			return null;
		}
		return selectedData
			.map(a => ({ x: a.timestamp, y: a.median * 1000, endpoint: a.endpoint }));
	}

	function GetDownloads() {
		if (selectedGeneralData === null) {
			return null;
		}
		return selectedGeneralData
			.map(a => ({ x: a.timestamp, y: a.downloads }));
	}

	function GetUploads() {
		if (selectedGeneralData === null) {
			return null;
		}
		return selectedGeneralData
			.map(a => ({ x: a.timestamp, y: a.uploads }));
	}

	function GetViews() {
		if (selectedGeneralData === null) {
			return null;
		}
		return selectedGeneralData
			.map(a => ({ x: a.timestamp, y: a.views }));
	}

	function GetUncaughtExceptions() {
		if (selectedGeneralData === null) {
			return null;
		}
		return selectedGeneralData
			.map(a => ({ x: a.timestamp, y: a.uncaughtExceptions }));
	}

	function GetCountTotalRequests() {
		if (selectedGeneralData === null) {
			return null;
		}
		return selectedGeneralData
			.map(a => ({ x: a.timestamp, y: a.countTotalRequests }));
	}

	function GetOutliersSeconds() {
		if (outliers === null) {
			return null;
		}
		return outliers.map(a => ({ x: a.timestamp, y: a.seconds * 1000, endpoint: a.endpoint, reqinfo: a.reqinfo }));
	}

	function GetPrivateMemory() {
		if (selectedGeneralData === null) {
			return null;
		}
		return selectedGeneralData
			.map(a => ({ x: a.timestamp, y: (a.privateMemory / 1024) / 1024 }));
	}

	function GetWorkingSet() {
		if (selectedGeneralData === null) {
			return null;
		}
		return selectedGeneralData
			.map(a => ({ x: a.timestamp, y: (a.workingSet / 1024) / 1024  }));
	}

	function GetVirtualMemory() {
		if (selectedGeneralData === null) {
			return null;
		}
		return selectedGeneralData
			.map(a => ({ x: a.timestamp, y: (a.virtualMemory / 1024) / 1024  }));
	}


	function SetDateAndTimes() {
		time = document.getElementById("time").value.slice(0, -2) + '00';
		dateTime = new Date(document.getElementById("date").value + 'T' + time);
		maxDateTime = new Date(dateTime);
		maxDateTime.setHours(maxDateTime.getHours() + 1);
	}

	function FilterWithEndpoint(data) {
		if (data === null) {
			return null;
		}
		return data.filter(a => a.endpoint === selectedEndpoint);
	}

	function FilterWithEndpointAndTime(data) {
		if (data === null) {
			return null;
		}
		return data.filter(a => a.endpoint === selectedEndpoint && new Date(a.x) >= dateTime && new Date(a.x) < maxDateTime)
	}

	function FilterWithTime(data) {
		if (data === null) {
			return null;
		}
		return data.filter(a => new Date(a.x) >= dateTime && new Date(a.x) < maxDateTime)
	}

	function ParameterChanged() {
		let data;
		switch (dataType) {
			case 'Average':
				data = GetAverageData();
				break;
			case 'Median':
				data = GetMedianData();
				break;
			case 'Percentile 95':
				data = GetPercentile95Data();
				break;
			case 'Percentile 99':
				data = GetPercentile99Data();
				break;
			case 'Db exec time':
				data = GetDbExecTimeData();
				break;
			case 'Render time':
				data = GetRenderTimeData();
				break;
			default:
				data = GetAverageData();
		}

		if (timeUnit === 'minute') {
			SetDateAndTimes();
			data = FilterWithEndpointAndTime(data);
		}
		else {
			data = FilterWithEndpoint(data);
		}

		mixedChart.data.datasets[1].data = data;
		mixedChart.data.datasets[1].label = dataType;
		mixedChart.options.plugins.title.text = "Count requests and " + dataType;
		
		mixedChart.update();
	}

	function GeneralParameterChanged() {
		let data;

		switch (generalDataType) {
			case 'Downloads':
				data = GetDownloads();
				break;
			case 'Views':
				data = GetViews();
				break;
			case 'Uploads':
				data = GetUploads();
				break;
			case 'Uncaught exceptions':
				data = GetUncaughtExceptions();
				break;
			case 'Count total requests':
				data = GetCountTotalRequests();
				break;
			default:
				data = GetDownloads();
				break;
		}

		if (timeUnit === 'minute') {
			SetDateAndTimes();
			data = FilterWithTime(data);
		}

		
		barChart.data.datasets[0].data = data;
		barChart.data.datasets[0].label = generalDataType;
		barChart.options.plugins.title.text = generalDataType;

		barChart.update();
	}

	function GeneralParameterMemoryChanged() {
		let data;

		switch (generalDataTypeMemory) {
			case 'Private memory':
				data = GetPrivateMemory();
				break;
			case 'Working set':
				data = GetWorkingSet();
				break;
			case 'Virtual memory':
				data = GetVirtualMemory();
				break;
			default:
				data = GetPrivateMemory();
				break;
		}


		if (timeUnit === 'minute') {
			SetDateAndTimes();
			data = FilterWithTime(data);
		}

		barChartMemory.data.datasets[0].data = data;
		barChartMemory.data.datasets[0].label = generalDataTypeMemory + " in mb";
		barChartMemory.options.plugins.title.text = generalDataTypeMemory + " in mb";

		barChartMemory.update();
	}

	const ctx = document.getElementById('mixedChart');
	let outlierTable = document.getElementById('outlierTabel');
	let outlierTableBody = document.getElementById('outlierTabelBody');

	function clickOurlierHandler(click) {
		const points = mixedChart.getElementsAtEventForMode(click, 'nearest', { intersect: true }, true);
		if (points.length) {
			const firstPoint = points[0];
			if (firstPoint.datasetIndex === 2) {
				const outlier = mixedChart.data.datasets[2].data[firstPoint.index];
				if (!selectedOutliers.includes(outlier)) {
					selectedOutliers.push(outlier);

					let row = document.createElement('tr');
					let tdTimestamp = document.createElement('td');
					let dateTime = new Date(outlier.x);
					let formatedDateTime = (dateTime.getDate()) + '-' + (dateTime.getMonth() + 1) + '-' + dateTime.getFullYear() + ' ' + dateTime.getHours() + ":" + dateTime.getMinutes() + ":" + dateTime.getSeconds();

					tdTimestamp.innerHTML = formatedDateTime.toString();
					let tdEndpoint = document.createElement('td');
					tdEndpoint.innerHTML = outlier.endpoint;


					row.appendChild(tdTimestamp);
					row.appendChild(tdEndpoint);
					outlierTableBody.appendChild(row);
				}
			}
		}
	}

	function DeleteRow(row) {
		console.log(row);
	}
	ctx.onclick = clickOurlierHandler;

	function NavigateToOutliers() {
		if (selectedOutliers.length > 0) {
			sessionStorage.setItem("outliers", JSON.stringify(selectedOutliers));
			location.href = "/admin/outliers";

		}
	}

</script>