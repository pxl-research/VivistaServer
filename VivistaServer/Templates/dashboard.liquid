<div class="pure-g">
	<div class="pure-u-1">
		<div class="pure-button-group">
			<button id="minuteBtn" class="pure-button pure-button-active">Minute</button>
			<button id="hourBtn" class="pure-button">Hour</button>
			<button id="dayBtn" class="pure-button">Day</button>
		</div>
		<div class="pure-u-1 pure-u-md-1-2 pure-u-lg-1-3 pure-u-xl-1-4">
			<div class="pure-form">
				<input type="date" id="date" name="date" />
				<input type="time" id="time" name="time" value="09:00" />
			</div>
		</div>

		<div class="pure-form">
			<select id="endpoint">
				{% for endpoint in endpoints %}
				<option value="{{endpoint}}">{{endpoint}}</option>
				{% endfor %}
			</select>
		</div>
		<br>
		<h1>Dashboard</h1>
		<div class="chartBox">
			<canvas id="mixedChart"></canvas>
		</div>
		<br />
		<table class="pure-table">
			<thead>
				<tr>
					<th>Users</th>
					<th>Videos</th>
					<th>Downloads</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>{{users}}</td>
					<td>{{videos}}</td>
					<td>{{downloads}}</td>
				</tr>
			</tbody>
		</table>
	</div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>

<style type="text/css">
	.chartBox {
		width: 1000px;
	}
</style>
<script>
	//------Retrieve and initialize data
	let minuteData = {{ minuteData | json}};
	let hourData = {{ hourData | json}};
	let dayData = {{ dayData | json}};
	let endpoints = {{ endpoints | json }};
	let selectedEndpoint = endpoints[0];


	let timeUnit = "minute";
	//let selectedData = minuteData.map(a => ({ x: a.timestamp, y: a.average, endpoint: a.endpoint }));
	let selectedData = minuteData;
	//Retrieve and initialize data------

	//------Date paramter
	const queryString = new URLSearchParams(window.location.search).get("date");
	document.getElementById("date").value = queryString;
	if (document.getElementById("date").value === "") {
		document.getElementById("date").value = new Date().toISOString().slice(0, 10);
	}

	let time = document.getElementById("time").value.slice(0, -2) + '00';
	let dateTime = new Date(document.getElementById("date").value + 'T' + time);
	let maxDateTime = new Date(dateTime);
	maxDateTime.setHours(maxDateTime.getHours() + 1);
	//Date paramter------

	//------Configure charts
	//mixedChart
	const dataMixedChart = {
		//labels: labels,
		datasets: [
			{
				label: 'Number of requests from endpoint',
				backgroundColor: 'rgb(255, 99, 132)',
				borderColor: 'rgb(255, 99, 132)',
				data: selectedData.map(a => ({ x: a.timestamp, y: a.countrequests, endpoint: a.endpoint })).filter(a => a.endpoint === selectedEndpoint && new Date(a.x) >= dateTime && new Date(a.x) < maxDateTime),
				order: 1,
				yAxisID: 'y',
			},
			{
				label: 'Percentile 99 in seconds',
				backgroundColor: 'rgb(30, 144, 255)',
				borderColor: 'rgb(30, 144, 255)',
				data: selectedData.map(a => ({ x: a.timestamp, y: a.percentile99, endpoint: a.endpoint })).filter(a => a.endpoint === selectedEndpoint && new Date(a.x) >= dateTime && new Date(a.x) < maxDateTime),
				type: 'line',
				order: 0,
				yAxisID: 'y1',
			},
		]
	};
	const configMixedChart = {
		type: 'bar',
		data: dataMixedChart,
		options: {
			scales: {
				x: {
					type: 'time',
					time: {
						unit: timeUnit,
						displayFormats: {
							minute: 'hh:mm',
							hour: 'MMM dd - hh:mm',
							day: 'MMM dd'

						}
					}
				},
				y: {
					beginAtZero: true,
					position: 'left'
				},
				y1: {
					beginAtZero: true,
					position: 'right'
				}
			}
		}
	};
	const mixedChart = new Chart(
		document.getElementById('mixedChart'),
		configMixedChart
	);
	//Configure charts------

	//--------Event listeners
	document.getElementById("minuteBtn").addEventListener("click", function () {
		selectedData = minuteData;
		ChangeTimeUnit("minute");
	});
	document.getElementById("hourBtn").addEventListener("click", function () {
		selectedData = hourData;
		ChangeTimeUnit("hour");
	});
	document.getElementById("dayBtn").addEventListener("click", function () {
		selectedData = dayData;
		ChangeTimeUnit("day");
	});
	document.getElementById("date").addEventListener("change", function () { location.href = "/admin/dashboard?date=" + document.getElementById("date").value;});
	document.getElementById("endpoint").addEventListener("change", function () { ChangeEndpoint(document.getElementById("endpoint").value) });
	document.getElementById("time").addEventListener("blur", function () {selectedData = minuteData; ChangeDataOfCharts(); });
	//Event listeners--------

	//--------Change paramters
	function ChangeTimeUnit(time) {
        document.getElementById(timeUnit + "Btn").classList.remove("pure-button-active");
        document.getElementById(time + "Btn").classList.add("pure-button-active");
		timeUnit = time;

		//Change mixed chart
		mixedChart.options.scales.x.time.unit = timeUnit;
		ChangeDataOfCharts();

	}

	function ChangeEndpoint(endpoint) {
		selectedEndpoint = endpoint;

		//Change mixed chart
		ChangeDataOfCharts();
	}

	function ChangeDataOfCharts() {
		if (timeUnit === 'minute') {
			time = document.getElementById("time").value.slice(0, -2) + '00';
			dateTime = new Date(document.getElementById("date").value + 'T' + time);
			maxDateTime = new Date(dateTime);
			maxDateTime.setHours(maxDateTime.getHours() + 1);


			mixedChart.data.datasets[0].data = selectedData.map(a => ({ x: a.timestamp, y: a.countrequests, endpoint: a.endpoint })).filter(a => a.endpoint === selectedEndpoint && new Date(a.x) >= dateTime && new Date(a.x) < maxDateTime);
			mixedChart.data.datasets[1].data = selectedData.map(a => ({ x: a.timestamp, y: a.percentile99, endpoint: a.endpoint })).filter(a => a.endpoint === selectedEndpoint && new Date(a.x) >= dateTime && new Date(a.x) < maxDateTime);
		}
		else {
			mixedChart.data.datasets[0].data = selectedData.map(a => ({ x: a.timestamp, y: a.countrequests, endpoint: a.endpoint })).filter(a => a.endpoint === selectedEndpoint);
			mixedChart.data.datasets[1].data = selectedData.map(a => ({ x: a.timestamp, y: a.percentile99, endpoint: a.endpoint })).filter(a => a.endpoint === selectedEndpoint);
		}
		mixedChart.update();
	}
	//Change parameters--------

</script>