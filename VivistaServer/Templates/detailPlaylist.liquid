<h1>Playlist: {{playlist.name}}</h1>
{% if IsOwner %}
<div class="pure-g videos-detail draggable-container">
	{% for video in playlist.videos %}
	<div class="video-detail pure-u-1 draggable" draggable="true" id="{{ video.id | guidbase64 }}">
		<img class="pure-img" src="/api/thumbnail?id={{ video.id }}">
		<div class="text metadata">
			<p class="title">{{ video.title | escape }}</p>
			<p class="uploader">{{ video.username | escape }}</p>
			<div class="download-message">
				<button data-uri="vivista://video/{{ video.id | guidbase64 }}" class="pure-button download-button">
					<span class="play-icon svg-icon">
						<svg version="1.1" viewBox="0 0 10 10">
							<path d="M 1,1 8,5 1,9 z"></path>
						</svg>
					</span> Play In Vivista

					<p class="hidden install-message">Don't have Vivista installed? <a class="install-download-anchor" href="/install/latest" download>Download now</a></p>
				</button>
			</div>
		</div>

	</div>
	{% endfor %}
</div>
{% else %}
<div class="pure-g videos-detail">
	{% for video in playlist.videos %}
	<div class="video-detail pure-u-1">
		<div class="download-message">
			<button data-uri="vivista://video/{{ video.id | guidbase64 }}" class="pure-button download-button">
				<span class="play-icon svg-icon">
					<svg version="1.1" viewBox="0 0 10 10">
						<path d="M 1,1 8,5 1,9 z"></path>
					</svg>
				</span> Play In Vivista

				<p class="hidden install-message">Don't have Vivista installed? <a class="install-download-anchor" href="/install/latest" download>Download now</a></p>
			</button>
		</div>
		<img class="pure-img" src="/api/thumbnail?id={{ video.id }}">
	</div>
	{% endfor %}
</div>

{% endif %}

<script>
	const draggables = document.querySelectorAll('.draggable');
	const containers = document.querySelectorAll('.draggable-container');
	let playlist = {{ playlist | json }};

	let indexDrag;

	draggables.forEach(draggable => {
		draggable.addEventListener('dragstart', () => {
			draggable.classList.add('dragging');

			//Note: Get index of draggedObject
			let videoIds = [];
			document.querySelectorAll('.draggable').forEach(element => {
				videoIds.push(element.id);
			});
			indexDrag = videoIds.indexOf(draggable.id);
		})
	});

	draggables.forEach(draggable => {
		draggable.addEventListener('dragend', () => {
			draggable.classList.remove('dragging');
			let newOrderDragables = document.querySelectorAll('.draggable');
			let videoIds = [];
			newOrderDragables.forEach(element => {
				videoIds.push(element.id);
			});

			let video1 = draggable.id;
			let index = videoIds.indexOf(draggable.id);
			let video2;
			if (indexDrag >  index) {
				video2 = videoIds[index + 1];
			}
			else {
				video2 = videoIds[index - 1];
			}

			//Note: Check if there something is changed
			if (video1 != video2 && video2 != undefined) {
				fetch('/api/edit_playlist_order?playlistid=' + playlist.idBase64 + "&video1=" + video1 + "&video2=" + video2, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
			})
				.then(response => response.json())
				.then(message => {
				})
				.catch((error) => {
				});
			}
		})
	});

	containers.forEach(container => {
		container.addEventListener('dragover', e => {
			const afterElement = getDragAfterElement(container, e.clientY);
			const draggable = document.querySelector('.dragging');
			if (afterElement == null) {
				container.appendChild(draggable);
			}
			else {
				container.insertBefore(draggable, afterElement);
			}
		})
	});

	function getDragAfterElement(container, y) {
		//Note(Tom): Every draggable that we are not currently dragging
		const draggableElements = [...container.querySelectorAll('.draggable:not(.dragging)')];

		//Note(Tom): check the closest element
		return draggableElements.reduce((closest, child) => {
			const box = child.getBoundingClientRect();
			const offset = y - box.top - box.height / 2;
			if (offset < 0 && offset > closest.offset) {
				return { offset: offset, element: child }
			}
			else {
				return closest;
			}
		}, { offset: Number.NEGATIVE_INFINITY }).element;
	}
</script>
<style>
	.draggable-container {
	}

	.draggable {
		cursor: move;
	}

		.draggable.dragging {
			opacity: .5;
		}



	.videos-detail {
		display: block;
	}

	.video-detail {
		position: relative;
		margin-bottom: 2em;
		width:100%;
		display: flex;
	}

		.video-detail img {
			width: 50%;
			max-height: 60vh;
			object-fit: contain;
			max-width: 300px;
		}
		.video-detail .metadata{
			width:20%;
			margin-left: 1em;
		}

		.video-detail .metadata .title{
			font-size: 14px;
			font-weight:bold;
		}

			.video-detail .metadata .uploader {
				font-size: 11px;
				
			}

		.video-detail .download-button {
			background-color: var(--button-download-bg);
			color: var(--button-download-font);
			font-size: 0.8em;
			border: 5px solid var(--button-download-font);
			box-shadow: hsla(0, 100%, 100%, .75) 0 0px 20px
		}

	.video-info-image .install-message {
		margin-top: .5em;
		margin-bottom: 0em;
		font-size: .6em;
	}

	.video-detail .install-message a {
		color: var(--button-download-font);
	}

		.video-detail .install-message a:hover {
			color: var(--button-download-font-hover);
			text-decoration: none;
		}

	.video-detail .download-button:hover {
		background-color: var(--button-download-bg-hover);
		box-shadow: hsla(0, 100%, 100%, .95) 0 0px 20px
	}

	.video-detail .download-button:focus {
		background-color: var(--button-download-bg-hover);
	}

	.video-detail .download-button:active {
		background-color: var(--button-download-bg-active);
	}
</style>
