<div class="pure-g center">
	<div class="video-info-image pure-u-1">
		<div class="download-message">
			<button data-uri="vivista://video/{{ video.id | guidbase64 }}" class="pure-button download-button">
				<span class="play-icon svg-icon">
					<svg version="1.1" viewBox="0 0 10 10">
						<path d="M 1,1 8,5 1,9 z"></path>
					</svg>
				</span> Play In Vivista

				<p class="hidden install-message">Don't have Vivista installed? <a class="install-download-anchor" href="/install/latest" download>Download now</a></p>
			</button>
		</div>
		<img class="pure-img" src="/api/thumbnail?id={{ video.id }}">
	</div>
	<div class="video-info pure-u-1 pure-u-md-1-2">
		<h1 class="title">{{ video.title | escape }}</h1>

		<button id="addToPlaylist" class="pure-button">Add to playlist</button>
		<p class="view-stats">{{ video.timestamp | date: "%e %b %Y"}} • {{ video.views | format_number: "N0" }} views • {{ video.downloads | format_number: "N0" }} downloads • {{ video.downloadsize | format_bytes }}</p>
		<div class="user">
			<a class="username" href="/user?name={{ video.username | escape }}">
				<img class="profile-picture-small" src="/profile_pictures/{{ video.userPicture }}">
				{{ video.username | escape }}
			</a>
			{% if userOwnsVideo %}
			<a class="pure-button edit-video" href="/edit_video?id={{ video.id | guidbase64 }}">Edit Video</a>
			{% endif %}
		</div>
		<p class="description">{{ video.description | escape }}</p>
		<p>
			{% for tag in video.tags %}
			<span class="tag">{{ tag.name | escape }}</span>
			{% endfor %}
		</p>
	</div>
	<div class="related-videos">
		<h1>Related videos</h1>
		{% for v in relatedVideos %}
		<a href="/video?id={{ video.id | guidbase64 }}">
			<div class="video pure-g">
				<div class="pure-u-1-3">
					<img class="pure-img" src="/api/thumbnail?id={{ v.id }}">
				</div>
				<div class="pure-u-2-3">
					<p class="title">{{v.title}}</p>
					<p class="uploader">{{v.username}}</p>
				</div>
			</div>
		</a>
		{% endfor %}
	</div>

	<div class="overlay hidden" id="popup">
		<div class="wrapper">
			<h2>Add to playlist</h2>
			<button id="close" class="close">&times;</button>
			<div class="main-content">
				<div class="container">
					<form id="form" method="dialog">
						<div class="pure-menu-scrollable playlists" id="playlists">
							{% for playlist in userPlaylists %}
							{% if playlist.playListContainsVideo == true %}
							<input type="checkbox" id="{{ playlist.name}}" name="{{ playlist.name }}" value="{{ playlist.name }}" checked>
							{% else %}
							<input type="checkbox" id="{{ playlist.name}}" name="{{ playlist.name }}" value="{{ playlist.name }}">
							{% endif %}
							<label for="{{playlist.name}}"> {{playlist.name}}</label><br>
							{% endfor %}
						</div>
						<h3>Make new playlist</h3>
						<label>Playlist name</label>
						<input type="text" name="name" id="name" /> <br /> <br />
						<label>Privacy</label>
						<select name="video-privacy" id="videoPrivacy">
							<option value="0" selected>Public</option>
							<option value="1">Organization</option>
							<option value="2">Unlisted</option>
							<option value="3">Private</option>
						</select> <br /> <br />
						<button class="button" id="addPlaylist" type="submit">Submit</button>
						<p class="formsuccess" id="message"></p>
					</form>
				</div>
			</div>
		</div>
	</div>
</div>
<script>
	//Note(Tom): Script needs to stay here, because of {{ userPlaylists | json }}
	let playlists = {{ userPlaylists | json }};
	AddEventListeners(playlists);

	const queryString = window.location.search;
	let id = new URLSearchParams(queryString).get('id');
	document.getElementById("form").addEventListener("submit", function () {
		let name = document.getElementById("name").value;
		fetch('/api/make_playlist?name=' + name + "&videoid=" + id + "&privacy=" + document.getElementById("videoPrivacy").value, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			}
		})
			.then(response => {
				if (response.status == 500) {
					response.text()
						.then(text => {
							let error = JSON.parse(text);
							document.getElementById("message").innerText  = error.error;
						});
				}
				else {
					response.json().then(message => {
						fetch('/api/get_playlists_with_video_check?videoid=' + id, {
							method: 'GET',
						})
							.then(response => response.json())
							.then(playlists => {
								document.getElementById("playlists").innerHTML = "";
								playlists.forEach(playlist => {
									let inputElement = document.createElement("INPUT");
									inputElement.setAttribute("type", "checkbox");
									inputElement.setAttribute("id", playlist.name);
									inputElement.setAttribute("name", playlist.name);
									inputElement.setAttribute("value", playlist.name);
									if (playlist.playListContainsVideo) {
										inputElement.checked = true;
									}
									let label = document.createElement("LABEL");
									label.setAttribute("for", playlist.name);
									label.innerHTML = " " + playlist.name;

									document.getElementById("playlists").appendChild(inputElement);
									document.getElementById("playlists").appendChild(label);
									document.getElementById("playlists").appendChild(document.createElement('br'));
								});
								AddEventListeners(playlists);

								document.getElementById("message").innerText = message;
							})
					});
				}
			})
	});
	document.getElementById("addToPlaylist").addEventListener("click", function () {
		let popupDiv = document.getElementById("popup");
		popupDiv.classList.remove("hidden");

	});
	document.getElementById("close").addEventListener("click", function () {
		let popupDiv = document.getElementById("popup");
		popupDiv.classList.add("hidden");
	});

	function AddEventListeners(playlists) {
		playlists.forEach(playlist => {
			document.getElementById(playlist.name).addEventListener('change', function () {
				if (this.checked) {
					fetch('/api/add_video_to_playlist?playlistid=' + playlist.idBase64 + "&videoid=" + id, {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						}
					})
						.then(response => {
							if (response.status == 500) {
								response.text()
									.then(text => {
										let error = JSON.parse(text);
										document.getElementById("message").innerText = error.error;
										document.getElementById(playlist.name).checked = false;
									});
							}
							else {
								response.json().then(message => {
									document.getElementById("message").innerText = message;
								});
							}
						})
						.catch((error) => {
							document.getElementById(playlist.name).checked = false;
						});
				} else {
					fetch('/api/delete_video_from_playlist?playlistid=' + playlist.idBase64 + "&videoid=" + id, {
						method: 'GET',
					})
						.then(response => {
							if (response.status == 500) {
								response.text()
									.then(text => {
										let error = JSON.parse(text);
										document.getElementById("message").innerText = error.error;
										document.getElementById(playlist.name).checked = true;
									});
							}
							else {
								response.json().then(message => {
									document.getElementById("message").innerText = message;
								});
							}
						})
						.catch((error) => {
							document.getElementById(playlist.name).checked = true;
						});
				}
			});
		});
	}
</script>